// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class DiveLog extends ethereum.Event {
  get params(): DiveLog__Params {
    return new DiveLog__Params(this);
  }
}

export class DiveLog__Params {
  _event: DiveLog;

  constructor(event: DiveLog) {
    this._event = event;
  }

  get diver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newDiveCount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract__getDiveLogResultValue0Struct extends ethereum.Tuple {
  get diveCount(): BigInt {
    return this[0].toBigInt();
  }

  get places(): Array<string> {
    return this[1].toStringArray();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  getDiveLog(diver: Address): Contract__getDiveLogResultValue0Struct {
    let result = super.call(
      "getDiveLog",
      "getDiveLog(address):((uint256,string[]))",
      [ethereum.Value.fromAddress(diver)],
    );

    return changetype<Contract__getDiveLogResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getDiveLog(
    diver: Address,
  ): ethereum.CallResult<Contract__getDiveLogResultValue0Struct> {
    let result = super.tryCall(
      "getDiveLog",
      "getDiveLog(address):((uint256,string[]))",
      [ethereum.Value.fromAddress(diver)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getDiveLogResultValue0Struct>(value[0].toTuple()),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class LogDiveCall extends ethereum.Call {
  get inputs(): LogDiveCall__Inputs {
    return new LogDiveCall__Inputs(this);
  }

  get outputs(): LogDiveCall__Outputs {
    return new LogDiveCall__Outputs(this);
  }
}

export class LogDiveCall__Inputs {
  _call: LogDiveCall;

  constructor(call: LogDiveCall) {
    this._call = call;
  }

  get diver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get placeId(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class LogDiveCall__Outputs {
  _call: LogDiveCall;

  constructor(call: LogDiveCall) {
    this._call = call;
  }
}

export class SetDiveMasterCall extends ethereum.Call {
  get inputs(): SetDiveMasterCall__Inputs {
    return new SetDiveMasterCall__Inputs(this);
  }

  get outputs(): SetDiveMasterCall__Outputs {
    return new SetDiveMasterCall__Outputs(this);
  }
}

export class SetDiveMasterCall__Inputs {
  _call: SetDiveMasterCall;

  constructor(call: SetDiveMasterCall) {
    this._call = call;
  }

  get diveMasterAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDiveMasterCall__Outputs {
  _call: SetDiveMasterCall;

  constructor(call: SetDiveMasterCall) {
    this._call = call;
  }
}
